
Analysis Description
--------------------
MEME (Mixed Effects Model of Evolution) estimates a site-wise synonymous
(&alpha;) and a two-category mixture of non-synonymous (&beta;-, with
proportion p-, and &beta;+ with proportion [1-p-]) rates, and uses a
likelihood ratio test to determine if &beta;+ > &alpha; at a site. The
estimates aggregate information over a proportion of branches at a site,
so the signal is derived from episodic diversification, which is a
combination of strength of selection [effect size] and the proportion of
the tree affected. A subset of branches can be selected for testing as
well, in which case an additional (nuisance) parameter will be inferred
-- the non-synonymous rate on branches NOT selected for testing.
Multiple partitions within a NEXUS file are also supported for
recombination - aware analysis. 

- __Requirements__: in-frame codon alignment and a phylogenetic tree

- __Citation__: Detecting Individual Sites Subject to Episodic Diversifying Selection.
_PLoS Genet_ 8(7): e1002764.

- __Written by__: Sergei L. Kosakovsky Pond, Steven Weaver

- __Contact Information__: spond@temple.edu

- __Analysis Version__: 2.1.1


>code –> Universal

>Loaded a multiple sequence alignment with **19** sequences, **306** codons, and **1** partitions from `/home/imelonie/DGINN/Sequences/FOXL3_ESNG_results_202207221635/FOXL3_sequences_filtered_longestORFs_mafft_mincov_prank_clustiso_frag_722_1641.best.fas`

>branches –> All

>Select the p-value threshold to use when testing for selection (permissible range = [0,1], default value = 0.1): 
>pvalue –> 0.1


### Branches to include in the MEME analysis
Selected 35 branches to include in the MEME analysis: `micMur_LOC105868272_XM_012758883, lemCat_FOXL3_XM_045542131, otoGar_LOC100962385_XM_003795501, saiBolBol_FOXL3_XM_003943761, nomLeu_LOC115831937_XM_030801489_clust, panPan_FOXL3_XM_034965416, homSap_FOXL3_ENSG00000248767, Node12, Node10, Node8, theGel_LOC112621589_XM_025381046, chlSab_FOXL3_XM_008018930, macFas_FOXL3_XM_045388018, Node18, Node16, papAnu_LOC100997057_XM_031665878, macNem_LOC105483432_XM_011744343, macFas_FOXL3_XM_005548949, gorGorGor_LOC101137760_XM_031012944, Node26, macMul_LOC702793_XM_001091091, Node25, Node23, Node21, Node15, Node7, rhiRox_LOC104664932_XM_030932018, Node6, traFra_FOXL3_XM_033193781, rhiBie_LOC108542469_XM_017892511, pilTep_FOXL3_XM_023188540, Node33, Node31, Node5, Node3`


### Obtaining branch lengths and nucleotide substitution biases under the nucleotide GTR model
* Log(L) = -2072.03, AIC-c =  4230.27 (43 estimated parameters)

### Obtaining the global omega estimate based on relative GTR branch lengths and nucleotide substitution biases
* Log(L) = -2047.34, AIC-c =  4195.56 (50 estimated parameters)
* non-synonymous/synonymous rate ratio for *test* =   0.3297

### Improving branch lengths, nucleotide substitution biases, and global dN/dS ratios under a full codon model
* Log(L) = -2046.45
* non-synonymous/synonymous rate ratio for *test* =   0.3174
Error:
Internal error in  _LikelihoodFunction::GradientLocateTheBump: in the Brent loop iteration 1.  -10.4232397303264 / -10.42323973032562.


Function call stack
1 :  [namespace = rzDkhzwT] Optimize(results, ^lf_bsrel);

-------
2 :  [namespace = mpi.faXpJFXT] Call(result_callback,0,Eval(job+'('+Join(",",utility.Map(arguments,"_value_","utility.convertToArgumentString (_value_)"))+')'),arguments);
-------
3 :  mpi.QueueJob(meme.queue,"meme.handle_a_site",{"0":"meme.site_likelihood","1":"meme.site_likelihood_bsrel","2":alignments.serialize_site_filter((meme.filter_specification[meme.partition_index])[utility.getGlobalValue("terms.data.name")],(_pattern_info_[utility.getGlobalValue("terms.data.sites")])[0]),"3":meme.partition_index,"4":_pattern_info_,"5":meme.site_model_mapping},"meme.store_results");
-------
4 :  Call("utility.ForEachPair.CB",utility.ForEachPair.key,object[utility.ForEachPair.key]);
-------
5 :  utility.ForEachPair(meme.site_patterns,"_pattern_","_pattern_info_",'
            if (_pattern_info_[utility.getGlobalValue("terms.data.is_constant")]) {
                meme.store_results (-1,None,{"0" : "meme.site_likelihood",
                                             "1" : "meme.site_likelihood_bsrel",
                                             "2" : None,
                                             "3" : meme.partition_index,
                                             "4" : _pattern_info_,
                                             "5" : meme.site_model_mapping
                                     });
            } else {
                mpi.QueueJob (meme.queue, "meme.handle_a_site", {"0" : "meme.site_likelihood",
                                                                 "1" : "meme.site_likelihood_bsrel",
                                                                 "2" : alignments.serialize_site_filter
                                                                   ((meme.filter_specification[meme.partition_index])[utility.getGlobalValue("terms.data.name")],
                                                                   (_pattern_info_[utility.getGlobalValue("terms.data.sites")])[0]),
                                                                 "3" : meme.partition_index,
                                                                 "4" : _pattern_info_,
                                                                 "5" : meme.site_model_mapping
                                                                    },
                                                                    "meme.store_results");
            }
        ');
-------
